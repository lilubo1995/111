#include<iostream>
using namespace std;
/*typedef struct BiTNode {
	int data;
	struct BiTNode*lchild, *rchild;
}BiTNode, *BiTree;*/
//二叉链表示法
struct BiTNode {
	int data;
	struct BiTNode*lchild, *rchild;
};
typedef struct BiTNode  BiTNode;
typedef struct BiTNode*  BiTree;
void inorder(BiTNode*root) {
	if (root == NULL) {
		return;
	}
	inorder(root->lchild);//遍历左子树
//	printf("%d", root->data);//遍历根节点
	inorder(root->rchild);//遍历右子树
}
//计算树的高度
int Dept(BiTNode*T) {
	int deptleft = 0;
	int deptright = 0;
	int deptval = 0;
	if (T == NULL) {
		deptval = 0;
		return deptval;
	}
	deptleft = Dept(T->lchild);//求左子树的高度
	deptright = Dept(T->rchild);//求右子树的高度
	deptval = 1 + (deptleft > deptright) ? deptleft : deptright;
	return deptval;
	
}
int main() {
	BiTNode t1, t2, t3, t4, t5;
	memset(&t1, 0, sizeof(BiTNode));
	memset(&t2, 0, sizeof(BiTNode));
	memset(&t3, 0, sizeof(BiTNode));
	memset(&t4, 0, sizeof(BiTNode));
	memset(&t5, 0, sizeof(BiTNode));

	t1.data = 1;
	t2.data = 2;
	t3.data = 3;
	t4.data = 4;
	t5.data = 5;
	//建立关系
	t1.lchild = &t2;
	t1.rchild = &t3;
	t2.lchild = &t4;
	t3.lchild = &t5;
	cout<<Dept(&t1)<<endl;
	inorder(&t1);
	system("pause");
	return 0;
}
